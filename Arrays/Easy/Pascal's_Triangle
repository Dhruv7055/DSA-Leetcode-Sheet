118. Pascal's Triangle
Easy
10.6K
344
Companies
Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:


 

Example 1:

Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
Example 2:

Input: numRows = 1
Output: [[1]]
 

Constraints:

1 <= numRows <= 30
Accepted
1.3M
Submissions
1.8M
Acceptance Rate
71.6%




// Optimized Solution
class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> ans = new ArrayList<>();
         //store the entire pascal's triangle:
        for (int row = 1; row <= numRows; row++) {
            ans.add(generateRow(row));
        }
        return ans;
    }
    
    public static List<Integer> generateRow(int row) {
        long ans = 1;
        List<Integer> ansRow = new ArrayList<>();
        ansRow.add(1); //inserting the 1st element

        //calculate the rest of the elements:
        for (int col = 1; col < row; col++) {
            ans = ans * (row - col);
            ans = ans / col;
            ansRow.add((int)ans);
        }
        return ansRow;
    }
}


class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> list = new ArrayList<>();
        if(numRows == 0) return list;
        list.add(new ArrayList<>());
        list.get(0).add(1);
        for(int i = 1; i < numRows; i++){
            List<Integer> row = new ArrayList<>();
            row.add(1);
            for(int j = 1; j < i; j++){
                row.add(list.get(i-1).get(j-1) + list.get(i-1).get(j));
            }
            row.add(1);
            list.add(row);
        }
        return list;

    }
}


// Output: [[1]]

// public class Main {
//     public static void main(String[] args) {
//         List<ArrayList<Integer>> list = new ArrayList<>();

//         // Add an empty ArrayList to the list
//         list.add(new ArrayList<>());

//         // Add the value 1 to the ArrayList at index 0
//         list.get(0).add(1);

//         System.out.println(list); // Output: [[1]]
//     }
// }
