287. Find the Duplicate Number
Solved
Medium
Topics
Companies
Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.
There is only one repeated number in nums, return this repeated number.
You must solve the problem without modifying the array nums and uses only constant extra space
Example 1:
Input: nums = [1,3,4,2,2]
Output: 2
Example 2:
Input: nums = [3,1,3,4,2]
Output: 3
Example 3:
Input: nums = [3,3,3,3,3]
Output: 3
Constraints:
1 <= n <= 105
nums.length == n + 1
1 <= nums[i] <= n
All the integers in nums appear only once except for precisely one integer which appears two or more times.
Follow up:
How can we prove that at least one duplicate number must exist in nums?
Can you solve the problem in linear runtime complexity?
Seen this question in a real interview before?
1/4 Yes No Accepted 1.7M Submissions 2.8M Acceptance Rate 60.6%




// Time Complexity: O(n)
// Space Complexity: O(1)
class Solution {
    public int findDuplicate(int[] nums) {
        int slow = nums[0];
        int fast = nums[0];
        do { // we are sure that at least one duplicate is there
            slow = nums[slow];
            fast = nums[nums[fast]];
        } while(slow != fast);
        // find the head of loop
        fast = nums[0];
        while(slow != fast) {
            slow = nums[slow];
            fast = nums[fast];
        }
        return fast;
    }
}



// Time Complexity: O(n)
// Space Complexity: O(n)

// class Solution {
//     public int findDuplicate(int[] nums) {
//         Set<Integer> set = new HashSet();
//         for(int i=0;i<nums.length;i++) {
//             if(set.contains(nums[i])) return nums[i];
//             set.add(nums[i]);
//         }
//         return -1;
//     }
// }


// Time Complexity: O(n*logn)
// Space Complexity: O(1)

// class Solution {
//     public int findDuplicate(int[] nums) {
//         Arrays.sort(nums);
//         for(int i=0;i<nums.length-1;i++)
//             if(nums[i] == nums[i+1]) return nums[i];
//         return -1;
//     }
// }
