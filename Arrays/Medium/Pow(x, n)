50. Pow(x, n)
Solved
Medium
Topics
Companies
Implement pow(x, n), which calculates x raised to the power n (i.e., xn).

 

Example 1:

Input: x = 2.00000, n = 10
Output: 1024.00000
Example 2:

Input: x = 2.10000, n = 3
Output: 9.26100
Example 3:

Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25
 

Constraints:

-100.0 < x < 100.0
-231 <= n <= 231-1
n is an integer.
Either x is not zero or n > 0.
-104 <= xn <= 104

Seen this question in a real interview before?
1/4
Yes
No
Accepted
1.6M
Submissions
4.6M
Acceptance Rate
34.7%



class Solution { // T.C => O(logN) S.C => O(1) as Math.pow has time complexity of log N
    public double myPow(double x, int n) {
        return Math.pow(x, n);
    }
}

// class Solution {
//     public double myPow(double x, int n) {
//         double ans = 1.0; // T.C => O(logN) S.C => O(1)
//         long nn = n;
//         if(nn < 0) {
//             nn = -1 * nn;
//         }
//         while(nn > 0){
//             if(nn % 2 == 1){
//                 ans = ans * x;
//                 nn = nn - 1;
//             }
//             else{
//                 x = x * x;
//                 nn = nn / 2;
//             }
//         }
//         if(n < 0){
//             ans = (double)1.0 / (double)ans;
//         }
//         return ans;
//     }
// }

// class Solution {
//     public double myPow(double x, int n) {
//         double ans = 1.0; // T.C => O(N) S.C => O(1)
//         if(n > 0){
//             for(int i = 0; i < n; i++){
//                 ans = ans * x;
//             }
//         }
//         else{
//             n = -1 * n;
//             for(int i = 0; i < n; i++){
//                 ans = ans * x;
//             }
//             ans = (double)1.0 / (double)ans;
//         }
//         return ans;
//     }
// }
