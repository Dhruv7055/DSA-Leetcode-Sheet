33. Search in Rotated Sorted Array
Medium
22.3K
1.3K
Companies
There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:

Input: nums = [1], target = 0
Output: -1
 

Constraints:

1 <= nums.length <= 5000
-104 <= nums[i] <= 104
All values of nums are unique.
nums is an ascending array that is possibly rotated.
-104 <= target <= 104
Accepted
2.1M
Submissions
5.4M
Acceptance Rate
39.2%




class Solution {
    public int search(int[] nums, int target) {
        int n = nums.length;
        int left = 0;
        int right = n-1;

        // Finding the pivot element that is the samllest element
        while(left <= right){
            int mid = left + (right-left)/2;
            if(nums[mid] > nums[n-1]){
                left = mid+1;
            }
            else{
                right= mid-1;
            }
        }

        int pivot = left;

        // Binary search over elements on the pivot's element's left
        int ans = binarySearch(nums, 0, left-1, target);
        if(ans != -1){
            return ans;
        }
        // Binary search over elements on the pivot's element's right

        return binarySearch(nums, left, n-1 , target);       
    }
    public static int binarySearch(int [] nums, int left_boundary, int right_boundary, int target){
        int low = left_boundary;
        int high = right_boundary; 
        while(low <= high){
           int mid = low + (high - low) / 2;
           if(nums[mid] == target){
               return mid;
           }
           else if(nums[mid] < target){
               low = mid + 1;
           }
           else{
               high = mid - 1;
           }
        }
        return -1;
    }
}




class Solution {
    public int search(int[] nums, int target) {
        // int low= 0;
        // int high = nums.length-1;
        // while(low <= high){
        //     int mid = low + (high-low)/2;
        //     if(nums[mid] == target) return mid;
        //     if(nums[low] <= nums[mid]){
        //         if(nums[low] <= target && target <= nums[mid]){
        //             high = mid-1;
        //         }
        //         else{
        //             low = mid+1;
        //         }
        //     }
        //     else{
        //         if(nums[mid] <= target && target <= nums[high]){
        //             low = mid + 1;
        //         }
        //         else{
        //             high = mid-1;
        //         }
        //     }
        // }
        // return -1;
    }
}



        
