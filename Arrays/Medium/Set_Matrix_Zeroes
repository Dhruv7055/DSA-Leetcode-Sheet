Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.
You must do it in place.
Example 1:
Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
Output: [[1,0,1],[0,0,0],[1,0,1]]
Example 2:
Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]
Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]
Constraints:
m == matrix.length
n == matrix[0].length
1 <= m, n <= 200
-231 <= matrix[i][j] <= 231 - 1
Follow up:
A straightforward solution using O(mn) space is probably a bad idea.
A simple improvement uses O(m + n) space, but still not the best solution.
Could you devise a constant space solution?
Seen this question in a real interview before?
1/4
Yes
No
Accepted
1.3M
Submissions
2.4M
Acceptance Rate
55.3%





// Optimized Solution
class Solution {
    public void setZeroes(int[][] matrix) {
        int n = matrix.length; // T C => O(N*M)
        int m = matrix[0].length; // S.C => O(1)
        int col0 = 1;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(matrix[i][j] == 0){
                    // mark the i-th row
                    matrix[i][0] = 0;
                    // mark the j-th column
                    if(j != 0){
                        matrix[0][j] = 0;
                    }
                    else{
                        col0 = 0;
                    }
                }
            }
        }
        for(int i = 1; i < n; i++){
            for(int j = 1; j < m; j++){
                if(matrix[i][j] != 0){
                    // check for col and row
                    if(matrix[0][j] == 0 || matrix[i][0] == 0){
                        matrix[i][j] = 0;
                    }
                }
            }
        }
        if(matrix[0][0] == 0){
            for(int j = 0; j < m; j++){
                matrix[0][j] = 0;
            }
        }
        if(col0 == 0){
            for(int i = 0; i < n; i++){
                matrix[i][0] = 0;
            }
        }
    }
}


// Better than Brute Force
// class Solution {
//     public void setZeroes(int[][] matrix) {
//         int n = matrix.length; // T C => O(N*M)
//         int m = matrix[0].length; // S.C => O(N) for row and O(M) for column
//         int [] row = new int[n];
//         int [] col = new int[m];
//         for(int i = 0; i < n; i++){
//             for(int j = 0; j < m; j++){
//                 if(matrix[i][j] == 0){
//                     row[i] = 1;
//                     col[j] = 1;
//                 }
//             }
//         }
//         for(int i = 0; i < n; i++){
//             for(int j = 0; j < m; j++){
//                 if(row[i] == 1 || col[j] == 1){
//                     matrix[i][j] = 0;
//                 }
//             }
//         }
//     }
// }



// Brute Force is by marking -1 the matrix itself and than converting -1 to zeroes in the matrix itself. 
// T.C => O(N^3) 
// S.C => O(1)

class Solution { // Brute force not working 176/178 test cases passed on leetcode
    public void setZeroes(int[][] matrix) { // T.C => O(N^3)  S.C => O(1)
        int n = matrix.length;  
        int m = matrix[0].length; 
        int [] row = new int[n];
        int [] col = new int[m];
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(matrix[i][j] == 0){
                    markrow(matrix, n, m, i);
                    markcol(matrix,n,m,j);
                }
            }
        }
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(matrix[i][j] == -1){
                    matrix[i][j] = 0;
                }
            }
        }
    }
    public static void markrow(int[][] matrix, int n, int m, int i){
        for(int j = 0; j < m; j++){
           if(matrix[i][j] != 0){
               matrix[i][j] = -1;
           }
        }
    }
    public static void markcol(int[][] matrix, int n, int m, int j){
        for(int i = 0; i < n; i++){
           if(matrix[i][j] != 0){
               matrix[i][j] = -1;
           }
        }
    }
}


// Test case failed for brute force on leetcode
Input
matrix =
[[-1],[2],[3]]
Use Testcase
Output
[[0],[2],[3]]
Expected
[[-1],[2],[3]]
