There is a robot on an m x n grid. 
The robot is initially located at the top-left corner (i.e., grid[0][0]).
The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]).
The robot can only move either down or right at any point in time.

Given the two integers m and n, return the number of possible unique paths 
that the robot can take to reach the bottom-right corner.

The test cases are generated so that the answer will be less than or equal to 2 * 109.

 

Example 1:


Input: m = 3, n = 7
Output: 28
Example 2:

Input: m = 3, n = 2
Output: 3
Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down
 

Constraints:

1 <= m, n <= 100

Seen this question in a real interview before?
1/4
Yes
No
Accepted
1.8M
Submissions
2.8M
Acceptance Rate
64.2%




// class Solution {
//     public int uniquePaths(int m, int n) { // DP Solution
        // int [][] arr = new int[m][n]; 
        // for(int i = 0; i < m; i++){
        //     for(int j = 0; j < n; j++){
        //         if(i == 0 || j == 0){
        //             arr[i][j] = 1;
        //         }
        //         else{
        //             arr[i][j] = arr[i-1][j] + arr[i][j-1];
        //         }
        //     }
        // }
        // return arr[m-1][n-1];
        // int i = 0;
        // int j = 0;
        // return count(i,j,m,n);
        
    // }
    // public static int count(int i, int j, int m, int n){
    //     if(i == m - 1 && j == n-1){
    //         return 1;
    //     }
    //     if(i >= m || j >= n){
    //         return 0;
    //     }
    //     return count(i+1, j, m, n) + count(i, j+1, m, n); 
    // }
// }


// public class Solution {
//     public int uniquePaths(int m, int n) {
//         long ans = 1;
//         for (int i = 1; i <= m - 1; i++) {
//             ans = ans * (n - 1 + i) / i;
//         }
//         return (int)ans;
//     }
// }

public class Solution {
    public int uniquePaths(int m, int n) {
        int ans = 1;
        int N = n + m - 2;
        int r = m - 1;
        for (int i = 1; i <= r; i++) {
            ans = ans * (N - r + i) / i;
        }
        return ans;
    }
}
