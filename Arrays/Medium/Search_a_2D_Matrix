74. Search a 2D Matrix
Solved
Medium
Topics
Companies
You are given an m x n integer matrix matrix with the following two properties:

Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.

You must write a solution in O(log(m * n)) time complexity.

 

Example 1:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true
Example 2:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 100
-104 <= matrix[i][j], target <= 104
Seen this question in a real interview before?
1/4
Yes
No
Accepted
1.7M
Submissions
3.4M
Acceptance Rate
49.9%



class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int n = matrix.length;
        int m = matrix[0].length;

        //apply binary search:
        int low = 0, high = n * m - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            int row = mid / m, col = mid % m;
            if (matrix[row][col] == target) return true;
            else if (matrix[row][col] < target) low = mid + 1;
            else high = mid - 1;
        }
        return false;
    }
}
Complexity Analysis : 
Time Complexity: O(log(NxM)), where N = given row number, M = given column number.
Reason: We are applying binary search on the imaginary 1D array of size NxM.

Space Complexity: O(1) as we are not using any extra space.


class Solution {
    public boolean searchMatrix(int[][] matrix, int target) { // T.C =>  S.C=> O(1)
        int row = 0;
        int col = matrix[0].length - 1;
        while(row < matrix.length && col >= 0){   // [[1,3],[2,4]]
            if(matrix[row][col] == target){
                return true;
            }
            else if(matrix[row][col] < target){
                row++;
            }
            else{
                col--;
            }
        }
        return false;
    }
}



public class Search {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int [][] arr = {{1,2,3,4},{5,6,7,8},{9,10,11,12}};
		System.out.println(check(arr, 12));
		
	}
	public static boolean check(int [][] arr, int target) {
		int n = arr.length;
		
		for(int i = 0; i < n; i++) {
			if(target >= arr[i][0] && target <= arr[i][arr[0].length - 1]) {
				return binarySeach(arr[i], target);
			}
		}
		return false;
	}
	public static boolean binarySeach(int [] arr, int target) {
		int low= 0;
		int high = arr.length - 1;
		while(low <= high) {
            int mid = low + (high - low) / 2;

			if(arr[mid] == target) {
				return true;
			}
			else if(arr[mid] < target) {
				low = mid + 1;
			}
			else {
				high = mid - 1;
			}
		}
		return false;
	}
}

Complexity Analysis : 
Time Complexity: O(N + logM), where N = given row number, M = given column number.
Reason: We are traversing all rows and it takes O(N) time complexity. But for all rows,
we are not applying binary search rather we are only applying it once for a particular row.
That is why the time complexity is O(N + logM) instead of O(N*logM).

Space Complexity: O(1) as we are not using any extra space.



public static boolean searchMatrix(ArrayList<ArrayList<Integer>> matrix, int target) {
        int n = matrix.size(), m = matrix.get(0).size();

        // traverse the matrix:
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (matrix.get(i).get(j) == target)
                    return true;
            }
        }
        return false;
    }
Complexity Analysis : 
Time Complexity: O(N X M), where N = given row number, M = given column number.
Reason: In order to traverse the matrix, we are using nested loops running for n and m times respectively.

Space Complexity: O(1) as we are not using any extra space.
