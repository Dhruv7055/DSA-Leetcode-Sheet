169. Majority Element
Easy
16.2K
469
Companies
Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:

n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109
 

Follow-up: Could you solve the problem in linear time and in O(1) space?
Accepted
1.9M
Submissions
3M
Acceptance Rate
63.9%




// Moore Voting Algorithm
class Solution { // Time Complexity O(logN) Space Complexity O(1)
    public int majorityElement(int[] nums) {
        return majority_Element(nums); 
    }
    public static int majority_Element(int []v) {
        //size of the given array:
        int n = v.length;
        int cnt = 0; // count
        int el = 0; // Element

        //applying the algorithm:
        for (int i = 0; i < n; i++) {
            if (cnt == 0) {
                cnt = 1;
                el = v[i];
            } else if (el == v[i]) cnt++;
            else cnt--;
        }

        //checking if the stored element
        // is the majority element:
        int cnt1 = 0;
        for (int i = 0; i < n; i++) {
            if (v[i] == el) cnt1++;
        }

        if (cnt1 > (n / 2)) return el;
        return -1;
    }
}




// class Solution {
//     public int majorityElement(int[] nums) {
//         Arrays.sort(nums); // Time Complexity O(logN) Space Complexity O(1)
//         return nums[nums.length/2];
//     }
    
// }

